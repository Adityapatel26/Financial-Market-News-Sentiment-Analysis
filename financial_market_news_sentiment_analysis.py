# -*- coding: utf-8 -*-
"""Financial Market News Sentiment Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZZ8Up96WvRHLmdNfc__pTXXVteF1rUcd
"""



"""# **Financial Market News Sentiment Analysis**"""



"""# **Objective**
Purpose:

Analyze the sentiment of financial news articles and reports to predict market movements.
Provide insights into how news sentiment affects stock prices and other financial indicators.
Develop a model that can classify news sentiment and correlate it with financial market trends.

# **Goals**:

Collect a comprehensive dataset of financial news articles.
Preprocess and clean the data for analysis.
Implement sentiment analysis techniques to classify news articles as positive, negative, or neutral.
Analyze the impact of sentiment scores on financial market indicators such as stock prices, trading volume, and volatility.
Develop predictive models to forecast market movements based on news sentiment.
Visualize the relationship between news sentiment and market performance.
Data Sources
Financial News:

News APIs: Use APIs from financial news providers such as Alpha Vantage, NewsAPI, Bloomberg, or Reuters.
Web Scraping: Scrape financial news websites and aggregators like Yahoo Finance, Google Finance, or MarketWatch using tools like BeautifulSoup and Scrapy.
Stock Market Data:

Stock Market APIs: Utilize APIs from sources like Alpha Vantage, Yahoo Finance, IEX Cloud, or Quandl for historical and real-time stock data.
Financial Databases: Access financial databases such as WRDS, Bloomberg Terminal, or Eikon for comprehensive market data.
Sentiment Lexicons:

Pre-built Lexicons: Use sentiment lexicons like VADER, AFINN, or TextBlob for initial sentiment analysis.
Custom Lexicons: Create domain-specific sentiment lexicons tailored to financial terminology using labeled datasets.

# **Import Library**
"""

import pandas as pd

import numpy as np

"""# **Import Data**"""

df = pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Financial%20Market%20News.csv', encoding = "ISO-8859-1")

df.head()

df.info()

df.shape

df.columns

"""# **GET FEATURE** **SELECTION**"""

' '.join(str(x) for x in df.iloc[1, 2:27])

df.index

len(df.index)

news = []
for row in range(0, len(df.index)):
    news.append(' '.join(str(x) for x in df.iloc[row, 2:27]))

type (news)

news [0]

X = news

type(X)

"""# **GET FEATURE TEXT CONVERSION TO BAG OF WORDS**"""

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(lowercase=True, ngram_range=(1,1))

X = cv.fit_transform(X)

X.shape

y = df['Label']

y.shape

"""# **GET TRAIN TEST SPLIT**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2529)

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=200)

rf.fit(X_train, y_train)
RandomForestClassifier(n_estimators=200)

y_pred = rf.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

confusion_matrix(y_test, y_pred)
array([[165, 416],
       [163, 487]])

print(classification_report(y_test, y_pred))